plugins {
    id("groovy")
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "4.4.2"
    id("io.micronaut.aot") version "4.4.2"
    id 'com.google.cloud.tools.jib' version '3.4.0'

}

version = "0.1"
group = "com.eventpipe"

repositories {
    mavenCentral()
}


dependencies {





    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut.cache:micronaut-cache-caffeine")
    implementation("io.micronaut.crac:micronaut-crac")
    implementation 'org.apache.groovy:groovy-datetime'


    implementation("commons-validator:commons-validator:1.7") {
        exclude group: 'commons-collections', module:'commons-collections'
    }
    implementation("jakarta.validation:jakarta.validation-api")
    implementation('com.expediagroup:rapid-sdk:5.0.0')


    implementation("io.micronaut.cache:micronaut-cache-management")
    implementation("io.micronaut.views:micronaut-views-velocity")

    implementation("io.micronaut.security:micronaut-security")




    compileOnly("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    annotationProcessor("io.micronaut.validation:micronaut-validation-processor")
    implementation("io.micronaut:micronaut-management")

    compileOnly("io.micronaut.data:micronaut-data-processor")
    runtimeOnly("org.yaml:snakeyaml")
    implementation 'com.opencsv:opencsv:5.8'

    //GCP
    implementation("io.micronaut.gcp:micronaut-gcp-common")
    implementation("io.micronaut.gcp:micronaut-gcp-pubsub")
    implementation("io.micronaut.gcp:micronaut-gcp-tracing")
    implementation("io.micronaut.objectstorage:micronaut-object-storage-gcp")
    implementation("io.micronaut.gcp:micronaut-gcp-logging")
    implementation("io.micronaut.gcp:micronaut-gcp-http-client")

    //database
    implementation("jakarta.persistence:jakarta.persistence-api")
    implementation("jakarta.annotation:jakarta.annotation-api")

    //Mongodb
    compileOnly("io.micronaut.data:micronaut-data-document-processor")
    implementation("io.micronaut.data:micronaut-data-mongodb")
    implementation("io.micronaut.serde:micronaut-serde-bson")
    implementation("org.mongodb:mongodb-driver-sync")

    //Redis
    implementation('org.redisson:redisson-micronaut-40:3.26.0')

    //reactive
    implementation("io.micronaut.reactor:micronaut-reactor")
    implementation("io.micronaut.reactor:micronaut-reactor-http-client")

    //Emailing
    implementation("io.micronaut.views:micronaut-views-velocity")
    implementation("io.micronaut.email:micronaut-email-template")
    implementation("io.micronaut.email:micronaut-email-sendgrid")

    //Security
    implementation 'org.springframework.security:spring-security-crypto:6.2.0'

    //Test
    runtimeOnly("ch.qos.logback:logback-classic")
    testImplementation("org.testcontainers:spock")
    testImplementation("org.testcontainers:testcontainers")
    testImplementation("io.micronaut:micronaut-inject-groovy")
    testImplementation "io.micronaut.test:micronaut-test-spock"
    testImplementation("org.spockframework:spock-core") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }

}

application {
    mainClass.set("com.mycompany.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}

graalvmNative.toolchainDetection = false

micronaut {
    runtime("netty")
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("com.mycompany.*,io.micronaut.core.annotation.*,javax.inject.*,jakarta.validation.*")
    }
}

micronaut {
    runtime("netty")
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("com.example.*")
    }
    aot {
        // Please review carefully the optimizations enabled below
        // Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
        replaceLogbackXml = true
    }
}

tasks.named("dockerBuild") {
    images = ["${imageName}"]
}
